import { Person } from "@/api/datas/studants";
import { Task } from "@/api/datas/task";
import { Dispatch, SetStateAction } from "react";
import { Toast } from "./toast";
import { Chat } from "@/api/datas/chat";
import { EmojiClickData, Theme } from "emoji-picker-react";

export interface AppContextType {
  currentToast: Toast | null;
  setCurrentToast: (toast: Toast | null) => void;
  setToastQueue: React.Dispatch<React.SetStateAction<Toast[]>>;
  toastQueue: Toast[];
  queueLength: number;
  text: string;
  filterOption: string;
  navbarActive: boolean;
  modal: boolean;
  canGoBack: boolean;
  canGoForward: boolean;
  addClass: boolean;
  open: boolean;
  addMode: boolean;
  detailsActive: boolean;
  alertToast: boolean;
  successQueue: Toast[];
  alertQueue: Toast[];
  currentPageItems: number;
  currentPagePersons: number;
  studentsPerPage: number;
  tasksPerPage: number;
  totalItemsPages: number;
  totalPersonsPages: number;
  searchStudent: string;
  searchTask: string;
  searchChat: string;
  searchProfile: string;
  items: Task[];
  persons: Person[];
  currentItems: Task[];
  currentPersons: Person[];
  // toasts: Toast[];
  chat: Chat[];
  newChat: Chat[];
  theme: Theme;
  setTheme: React.Dispatch<React.SetStateAction<Theme>>;
  // setToasts: React.Dispatch<React.SetStateAction<Toast[]>>;
  setSearchStudent: Dispatch<SetStateAction<string>>;
  setSearchTask: Dispatch<SetStateAction<string>>;
  setSearchChat: Dispatch<SetStateAction<string>>;
  setSearchProfile: Dispatch<SetStateAction<string>>;
  setFilterOption: Dispatch<SetStateAction<string>>;
  setCanGoBack: React.Dispatch<React.SetStateAction<boolean>>;
  setCanGoForward: React.Dispatch<React.SetStateAction<boolean>>;
  setOpen: React.Dispatch<React.SetStateAction<boolean>>;
  setAddMode: React.Dispatch<React.SetStateAction<boolean>>;
  setDetailsActive: React.Dispatch<React.SetStateAction<boolean>>;
  setAlertToast: React.Dispatch<React.SetStateAction<boolean>>;
  setText: React.Dispatch<React.SetStateAction<string>>;
  modalContent: React.ReactNode;
  setModalContent: React.Dispatch<React.SetStateAction<React.ReactNode>>;
  handleItemsPageChange: (pageNumber: number) => void;
  handlePersonsPageChange: (pageNumber: number) => void;
  handleEmoji: (e: EmojiClickData) => void;
  openPopUpModal: () => void;
  toggleNavbar: () => void;
  openModal: () => void;
  closeModal: () => void;
  handleBackClickTable: () => void;
  handleForwardClickTable: () => void;
  handleBackClickTask: () => void;
  handleForwardClickTask: () => void;
  handleDelete: () => void;
  handleUpdate: () => void;
  handleCraete: () => void;
  handleTaskCompleted: () => void;
  handleSendEmail: () => void;
  handleRegisterUser: () => void;
  openFormModal: () => void;
  changeMode: () => void;
  openForm: () => void;
  toggleChatDetails: () => void;
  addChat: (index: number) => void;
  handleRemoveToast: (
    id: number,
    type: "success" | "alert",
    removeAll?: boolean
  ) => void;
  handleShowNotification: (text: string, type: "success" | "alert") => void;
  formatDate: (date: string) => string;
  alertQueueLength: number;
  successQueueLength: number;
}
